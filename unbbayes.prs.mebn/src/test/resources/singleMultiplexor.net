net
{
     node_size = (0 0);
     name = "AutomaticallyCreatedNet";
     tree = "(Main(E1),Resident2(E1),CX2,Resident1(E1),CX1,Parent2(E1),Parent2(E2),YetAnotherParent1(E1),Parent1(E1),Parent1(E2),Main(E1),Resident2(E1),Resident1(E1),Parent2(E1),Parent2(E2),YetAnotherParent1(E1),Parent1(E1),Parent1(E2),Main(E1),Resident2(E1),Resident1(E1),Parent2(E1),Parent2(E2),YetAnotherParent1(E1),Parent1(E1),Parent1(E2))";
     UnBBayes_Color_Probabilistic_Description = "-256";
     UnBBayes_Color_Probabilistic_Explanation = "-16711936";
}

node Main__E1
{
     label = "Main(E1)";
     position = (521 628);
     states = ("true" "false" "absurd");
}

node Resident2__E1
{
     label = "Resident2(E1)";
     position = (317 386);
     states = ("true" "false" "absurd");
}

node Resident1__E1
{
     label = "Resident1(E1)";
     position = (613 371);
     states = ("true" "false" "absurd");
}

node MyEntity_equals_Reference_E1
{
     label = "CX2";
     position = (493 186);
     states = ("E1" "E2");
}

node Parent2__E1
{
     label = "Parent2(E1)";
     position = (17 472);
     states = ("true" "false" "absurd");
}

node Parent2__E2
{
     label = "Parent2(E2)";
     position = (19 265);
     states = ("true" "false" "absurd");
}

node YetAnotherParent1__E1
{
     label = "YetAnotherParent1(E1)";
     position = (944 140);
     states = ("true" "false" "absurd");
}

node Parent1__E1
{
     label = "Parent1(E1)";
     position = (1028 481);
     states = ("true" "false" "absurd");
}

node Parent1__E2
{
     label = "Parent1(E2)";
     position = (994 296);
     states = ("true" "false" "absurd");
}

potential (Main__E1 | Resident1__E1 Resident2__E1)
{
 data = ((( 0.33333334 0.33333334 0.33333334 )
( 0.33333334 0.33333334 0.33333334 )
( 0.33333334 0.33333334 0.33333334 ))
(( 0.33333334 0.33333334 0.33333334 )
( 0.33333334 0.33333334 0.33333334 )
( 0.33333334 0.33333334 0.33333334 ))
(( 0.33333334 0.33333334 0.33333334 )
( 0.33333334 0.33333334 0.33333334 )
( 0.33333334 0.33333334 0.33333334 )));
}

potential (Resident2__E1 | MyEntity_equals_Reference_E1 Parent2__E2 Parent2__E1)
{
 data = (((( 0.9 0.1 0.0 )
( 0.2 0.8 0.0 )
( 0.0 0.0 1.0 ))
(( 0.9 0.1 0.0 )
( 0.2 0.8 0.0 )
( 0.0 0.0 1.0 ))
(( 0.9 0.1 0.0 )
( 0.2 0.8 0.0 )
( 0.0 0.0 1.0 )))
((( 0.9 0.1 0.0 )
( 0.9 0.1 0.0 )
( 0.9 0.1 0.0 ))
(( 0.2 0.8 0.0 )
( 0.2 0.8 0.0 )
( 0.2 0.8 0.0 ))
(( 0.0 0.0 1.0 )
( 0.0 0.0 1.0 )
( 0.0 0.0 1.0 ))));
}

potential (Resident1__E1 | MyEntity_equals_Reference_E1 Parent1__E2 Parent1__E1 YetAnotherParent1__E1)
{
 data = ((((( 0.9 0.1 0.0 )
( 0.0 1.0 0.0 )
( 0.0 0.0 1.0 ))
(( 0.2 0.8 0.0 )
( 0.0 1.0 0.0 )
( 0.0 0.0 1.0 ))
(( 0.0 0.0 1.0 )
( 0.0 1.0 0.0 )
( 0.0 0.0 1.0 )))
((( 0.9 0.1 0.0 )
( 0.0 1.0 0.0 )
( 0.0 0.0 1.0 ))
(( 0.2 0.8 0.0 )
( 0.0 1.0 0.0 )
( 0.0 0.0 1.0 ))
(( 0.0 0.0 1.0 )
( 0.0 1.0 0.0 )
( 0.0 0.0 1.0 )))
((( 0.9 0.1 0.0 )
( 0.0 1.0 0.0 )
( 0.0 0.0 1.0 ))
(( 0.2 0.8 0.0 )
( 0.0 1.0 0.0 )
( 0.0 0.0 1.0 ))
(( 0.0 0.0 1.0 )
( 0.0 1.0 0.0 )
( 0.0 0.0 1.0 ))))
(((( 0.9 0.1 0.0 )
( 0.0 1.0 0.0 )
( 0.0 0.0 1.0 ))
(( 0.9 0.1 0.0 )
( 0.0 1.0 0.0 )
( 0.0 0.0 1.0 ))
(( 0.9 0.1 0.0 )
( 0.0 1.0 0.0 )
( 0.0 0.0 1.0 )))
((( 0.2 0.8 0.0 )
( 0.0 1.0 0.0 )
( 0.0 0.0 1.0 ))
(( 0.2 0.8 0.0 )
( 0.0 1.0 0.0 )
( 0.0 0.0 1.0 ))
(( 0.2 0.8 0.0 )
( 0.0 1.0 0.0 )
( 0.0 0.0 1.0 )))
((( 0.0 0.0 1.0 )
( 0.0 1.0 0.0 )
( 0.0 0.0 1.0 ))
(( 0.0 0.0 1.0 )
( 0.0 1.0 0.0 )
( 0.0 0.0 1.0 ))
(( 0.0 0.0 1.0 )
( 0.0 1.0 0.0 )
( 0.0 0.0 1.0 )))));
}

potential (MyEntity_equals_Reference_E1)
{
 data = ( 0.5 0.5 );
}

potential (Parent2__E1)
{
 data = ( 0.33333334 0.33333334 0.33333334 );
}

potential (Parent2__E2)
{
 data = ( 0.33333334 0.33333334 0.33333334 );
}

potential (YetAnotherParent1__E1)
{
 data = ( 0.33333334 0.33333334 0.33333334 );
}

potential (Parent1__E1)
{
 data = ( 0.33333334 0.33333334 0.33333334 );
}

potential (Parent1__E2)
{
 data = ( 0.33333334 0.33333334 0.33333334 );
}

