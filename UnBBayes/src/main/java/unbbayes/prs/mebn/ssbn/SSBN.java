 /*
 *  UnBBayes
 *  Copyright (C) 2002, 2008 Universidade de Brasilia - http://www.unb.br
 *
 *  This file is part of UnBBayes.
 *
 *  UnBBayes is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  UnBBayes is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with UnBBayes.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package unbbayes.prs.mebn.ssbn;

import java.util.ArrayList;
import java.util.List;

import unbbayes.prs.bn.ProbabilisticNetwork;
import unbbayes.prs.bn.TreeVariable;
import unbbayes.prs.mebn.ssbn.exception.SSBNNodeGeneralException;

/**
 * Encapsule the SSBN generated by the ISSBNGenerator. 
 * 
 * @author Laecio Lima dos Santos (laecio@gmail.com)
 *
 */
public class SSBN {

	private ProbabilisticNetwork probabilisticNetwork; 
	
	private List<SSBNNode> findingList; 
	
	private List<Query> queryList; 
	
	private List<SSBNWarning> warningList; 
	
	private List<SimpleSSBNNode> ssbnNodeList; 
	
	private List<SimpleEdge> edgeList; 
	
	private enum State{
		INITIAL, 
		COMPILED, 
		WITH_FINDINGS, 
		FINDINGS_PROPAGATED, 
		USER_ACTION
	}
	
	private State state = State.INITIAL; 
	
	/**
	 *
	 * @param pn Probabilistic network get on the algorithm 
	 * @param findingList List of SSBNNode's where for each element the property isFinding = true
	 * @param queryList List of queries
	 */
	public SSBN(){
		findingList = new ArrayList<SSBNNode>(); 
		queryList = new ArrayList<Query>(); 
		warningList = new ArrayList<SSBNWarning>();
		ssbnNodeList = new ArrayList<SimpleSSBNNode>(); 
		edgeList = new ArrayList<SimpleEdge>(); 
	}
	
	/**
	 * Initialize the ssbn: 
	 * 1) Compile the network
	 * 2) Add the findings
	 * 3) Propagate the findings
	 * 
	 * After this, the network is ready to show to the user
	 * @throws Exception 
	 */
	public void compileAndInitializeSSBN() throws Exception{
		compileNetwork(); 
//		System.out.println("Network compiled");
		addFindings();
//		System.out.println("Findings setted");
		propagateFindings(); 
//		System.out.println("Findings propagated");
	}
	
	public void reinitializeSSBN() throws Exception{
	    this.probabilisticNetwork.initialize();
		addFindings();
//		System.out.println("Findings setted");
		propagateFindings(); 
//		System.out.println("Findings propagated");	    
	}
	
	private void compileNetwork() throws Exception{
		probabilisticNetwork.compile(); 
		state = State.COMPILED; 
	}
	
	
	/**
	 * Propagate the findings 
	 * 
	 * Pre-Requisite: 
	 * - All the nodes of the list of findings have only one actual value
	 */
	private void addFindings() throws SSBNNodeGeneralException{
		
		for(SSBNNode findingNode: findingList){
//			System.out.println("Set finding: " + findingNode + "=" + findingNode.getValue());
			TreeVariable node = findingNode.getProbNode();

			String nameState = findingNode.getValue().getName(); 
			
			boolean ok = false; 
			for(int i = 0; i < node.getStatesSize(); i++){
				if(node.getStateAt(i).equals(nameState)){
					node.addFinding(i);
					ok = true; 
					break; 
				}
			}
			
			if(!ok){
				throw new SSBNNodeGeneralException(); 
			}
			
		}
		
		state = State.WITH_FINDINGS; 
		
	}
	
	private void propagateFindings() throws Exception{
		probabilisticNetwork.updateEvidences();
		state = State.FINDINGS_PROPAGATED; 
	}

	// GET AND SET'S METHODS
	
	public List<SSBNNode> getFindingList() {
		return findingList;
	}

	public List<Query> getQueryList() {
		return queryList;
	}
	
	public ProbabilisticNetwork getProbabilisticNetwork() {
		return probabilisticNetwork;
	}

	public void setProbabilisticNetwork(ProbabilisticNetwork probabilisticNetwork) {
		this.probabilisticNetwork = probabilisticNetwork;
	}

	public void setFindingList(List<SSBNNode> findingList) {
		this.findingList = findingList;
	}

	public void setQueryList(List<Query> queryList) {
		this.queryList = queryList;
	}

	public List<SSBNWarning> getWarningList() {
		return warningList;
	}
	
	public void setWarningList(List<SSBNWarning> warningList){
		this.warningList = warningList; 
	}

	public List<SimpleSSBNNode> getSsbnNodeList() {
		return ssbnNodeList;
	}
	
	public void addSSBNNode(SimpleSSBNNode node){
		this.ssbnNodeList.add(node); 
	}

	public List<SimpleEdge> getEdgeList() {
		return edgeList;
	}


	
}
