 /*
 *  UnBBayes
 *  Copyright (C) 2002, 2008 Universidade de Brasilia - http://www.unb.br
 *
 *  This file is part of UnBBayes.
 *
 *  UnBBayes is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  UnBBayes is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with UnBBayes.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package unbbayes.prs.mebn.ssbn;

import java.util.ArrayList;
import java.util.List;

import unbbayes.io.LogManager;
import unbbayes.prs.bn.ProbabilisticNetwork;
import unbbayes.prs.bn.TreeVariable;
import unbbayes.prs.mebn.ssbn.exception.SSBNNodeGeneralException;

/**
 * Encapsule the SSBN generated by the ISSBNGenerator. 
 * 
 * @author Laecio Lima dos Santos (laecio@gmail.com)
 * 
 */
public class SSBN {

	private ProbabilisticNetwork probabilisticNetwork; 
	
	private List<SimpleSSBNNode> findingList; 
	
	private List<Query> queryList; 
	
	private List<SimpleSSBNNode> simpleSSBNNodeList; 
	private List<SimpleEdge> edgeList; 
	
	private List<SSBNNode> ssbnNodeList;
	
	private List<MFragInstance> mFragInstanceList; 
	
	//informations about the creation of the SSBN
	private LogManager logManager = new LogManager();
	private List<SSBNWarning> warningList; 
	
	private enum State{
		INITIAL, 
		COMPILED, 
		WITH_FINDINGS, 
		FINDINGS_PROPAGATED, 
		USER_ACTION
	}
	
	private State state = State.INITIAL; 
	
	/**
	 *
	 * @param pn Probabilistic network get on the algorithm 
	 * @param findingList List of SSBNNode's where for each element the property isFinding = true
	 * @param queryList List of queries
	 */
	public SSBN(){
		findingList = new ArrayList<SimpleSSBNNode>(); 
		queryList = new ArrayList<Query>(); 
		warningList = new ArrayList<SSBNWarning>();
		simpleSSBNNodeList = new ArrayList<SimpleSSBNNode>(); 
		ssbnNodeList = new ArrayList<SSBNNode>(); 
		edgeList = new ArrayList<SimpleEdge>();
		mFragInstanceList = new ArrayList<MFragInstance>(); 
	}
	
	
	
	
	//---------- METHODS FOR ADD COMPONENTS TO THE ALGORITHM EVALUATION ---
	
	//Be careful... this method is very hard!!! 
	public MFragInstance addMFragIfItDontAdded(MFragInstance mFragInstance){
		
		for(MFragInstance mFragInstanceTest: mFragInstanceList){
			if(mFragInstanceTest.equals(mFragInstance)){
				return mFragInstanceTest; 
			}
		}
		
		return null; 
	}
	
	/**
	 * Verify if already exists a node in the list of nodes. If its exists, return
	 * the already existent node, else return added the node to the list of node 
	 * and return it; 
	 */
	public SimpleSSBNNode addSSBNNodeIfItDontAdded(SimpleSSBNNode ssbnNode){
		
		SimpleSSBNNode alreadyExistentNode = null; 
		
		for(SimpleSSBNNode n: simpleSSBNNodeList){
			if(n.equals(ssbnNode)){
				alreadyExistentNode = n;  
			}
		}
		
		if(alreadyExistentNode == null){
			alreadyExistentNode = ssbnNode; 
			this.simpleSSBNNodeList.add(ssbnNode); 
		}
		
		return alreadyExistentNode; 
	}
	
	
	//---------- METHODS FOR ITERATION WITH THE STATE OF THE CPT EVALUATION ---
	
	/**
	 * Initialize the ssbn: 
	 * 1) Compile the network
	 * 2) Add the findings
	 * 3) Propagate the findings
	 * 
	 * After this, the network is ready to show to the user
	 * @throws Exception 
	 */
	public void compileAndInitializeSSBN() throws Exception{
		compileNetwork(); 
		addFindings();
		propagateFindings(); 
	}
	
	public void reinitializeSSBN() throws Exception{
	    this.probabilisticNetwork.initialize();
		addFindings();
		propagateFindings(); 
	}
	
	private void compileNetwork() throws Exception{
		probabilisticNetwork.compile(); 
		state = State.COMPILED; 
	}
	
	
	/**
	 * Propagate the findings 
	 * 
	 * Pre-Requisite: 
	 * - All the nodes of the list of findings have only one actual value
	 */
	private void addFindings() throws SSBNNodeGeneralException{
		
		for(SimpleSSBNNode findingNode: findingList){
			TreeVariable node = findingNode.getProbNode();

			String nameState = findingNode.getState().getName(); 
			
			boolean ok = false; 
			for(int i = 0; i < node.getStatesSize(); i++){
				if(node.getStateAt(i).equals(nameState)){
					node.addFinding(i);
					ok = true; 
					break; 
				}
			}
			
			if(!ok){
				throw new SSBNNodeGeneralException(); 
			}
			
		}
		
		state = State.WITH_FINDINGS; 
		
	}
	
	/**
	 * Used to mantain the compatibility for the Gia's SSBN Algorithm. 
	 * @param findingList
	 */
	@Deprecated
	public void setFindingList(List<SSBNNode> findingList){
		
		for(SSBNNode finding: findingList){
			SimpleSSBNNode simple = SimpleSSBNNode.getInstance(finding.getResident()); 
			for(OVInstance argument: finding.getArguments()){
				simple.setEntityForOv(argument.getOv(), argument.getEntity()); 
			}
			simple.setState(finding.getValue()); 
			simple.setProbNode(finding.getProbNode()); 
			
			this.findingList.add(simple); 
		}
	}
	
	private void propagateFindings() throws Exception{
		probabilisticNetwork.updateEvidences();
		state = State.FINDINGS_PROPAGATED; 
	}

	
	
	
	// GET AND SET'S METHODS
	
	public List<SimpleSSBNNode> getFindingList() {
		return findingList;
	}

	public List<Query> getQueryList() {
		return queryList;
	}
	
	public ProbabilisticNetwork getProbabilisticNetwork() {
		return probabilisticNetwork;
	}

	public void setProbabilisticNetwork(ProbabilisticNetwork probabilisticNetwork) {
		this.probabilisticNetwork = probabilisticNetwork;
	}

	public void setQueryList(List<Query> queryList) {
		this.queryList = queryList;
	}
	
	public List<SimpleSSBNNode> getSimpleSsbnNodeList() {
		return simpleSSBNNodeList;
	}
	
	public List<SSBNNode> getSsbnNodeList(){
		return ssbnNodeList; 
	}
	
	public void setSsbnNodeList(List<SSBNNode> list){
		this.ssbnNodeList = list; 
	}
	
	public void addSSBNNode(SimpleSSBNNode node){
		this.simpleSSBNNodeList.add(node); 
	}

	public List<SimpleEdge> getEdgeList() {
		return edgeList;
	}
	
	public void addEdge(SimpleEdge edge) {
		this.edgeList.add(edge);
	}
	
	public List<MFragInstance> getMFragInstanceList() {
		return mFragInstanceList;
	}
	
	//INFORMATIONS ABOUT THE GENERATION OF THE SSBN 
	
	public List<SSBNWarning> getWarningList() {
		return warningList;
	}
	
	//TODO remove this method
	public void setWarningList(List<SSBNWarning> e){
		this.warningList = e ; 
	}
	
	public LogManager getLogManager() {
		return logManager;
	}


	
	
}
