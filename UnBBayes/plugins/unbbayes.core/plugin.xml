<?xml version="1.0" ?>
<!DOCTYPE plugin PUBLIC "-//JPF//Java Plug-in Manifest 1.0" "http://jpf.sourceforge.net/plugin_1_0.dtd">
<plugin id="unbbayes.util.extension.core" version="1.0.0"
    class="unbbayes.util.extension.PluginCore">
    <runtime>
        <library id="core" path="/" type="code">
            <export prefix="*" />
        </library>
    </runtime>
    <!-- Module extension point. 
    	 UnBBayes' modules are basically new internal frames which are started when toolbars or menu are chosen.
    	 This extension point must extend unbbayes.util.extension.UnBBayesModule and provide the following informations:
    	 	class: full class name. It must extend unbbayes.util.extension.UnBBayesModule and provide a default constructor
    	 							(a constructor with no parameters) if factoryClass is not provided.
    	    builder: a class to instantiate the module. It must implement  unbbayes.util.extension.UnBBayesModuleBuilder.
    	    			  Use this field if "class" cannot provide a plausible default constructor.
    	 	name: name of the functionality. It must be unique.
    	 	description: tool tip text. Currently, no localization is supported.
    	 	icon: icon (image) to be used at the tool bar's button. 
    -->
    <extension-point id="Module">
        <parameter-def id="class"/>
        <parameter-def id="builder" multiplicity="none-or-one" />
        <parameter-def id="name"/>
		<parameter-def id="description" multiplicity="none-or-one" />
		<parameter-def id="icon" multiplicity="none-or-one" />
    </extension-point>
    
    <!-- BN inference algorithm extension point and its option panel. 
    	 This extension point is a swing JPanel used as a form in order to fill in some initialization attributes for inference algorithms.
    	 Inference algorithm are basically called during BN compilation.
    	 This extension point must extend unbbayes.util.extension.bn.inference.InferenceAlgorithmOptionPanel and provide the following informations:
    	 	class: full class name. It must extend unbbayes.util.extension.bn.inference.InferenceAlgorithmOptionPanel and provide a default constructor
    	 							(a constructor with no parameters).
		 The unbbayes.util.extension.bn.inference.InferenceAlgorithmOptionPanel is just a swing JPanel
 		 having a reference to unbbayes.util.extension.bn.inference.IInferenceAlgorithm, which implements the algorithm itself (similar to bridge pattern)
    -->
    <extension-point id="InferenceAlgorithm">
        <parameter-def id="class"/>
    </extension-point>
     <!-- Probabilistic Network I/O extension point. 
    	 This extension point is basically a set of different classes implementing
    	 unbbayes.io.BaseIO, in order to add new IO functions into basic PN
    	 module. The class must contain a public default constructor (no parameters)
    	 Please, note that this is different from Module extension point. Module extension point
    	 adds a pair of IO and Module (IO routines and a whole module in order to treat those files),
    	 but this (PNIO) extension point adds a new IO routine into the basic PN (Probabilistic Network)
    	 module, which is already incorporated into core.
    -->
    <extension-point id="PNIO">
        <parameter-def id="class"/>
    </extension-point>
    <!-- !!!CAUTION: THIS IS NOT IMPLEMENTED YET !!!
    	 ResourceBundle extension point. 
    	 This extension point is basically a set of different ResourceBundle, in order to implement
    	 localization (add new languages) using plugins.
    	 The classes must extend java.util.ListResourceBundle, respect package position,
    	 have a correct name (<NameOfTheExtendedResourceClass>_<LocaleID>),
    	 and feature the keys expected by each correspondent base resource.
    	 	Ex. If we intend to extend unbbayes.gui.oobn.resources.OOBNGuiResource for japanese support 
    	 	(locale ID is "ja"), we must create unbbayes.gui.oobn.resources.OOBNGuiResource_ja 
    	 	and fill the following keys using japanese messages:
    	 		OOBNPopupMenuMessage, changeNodeToPrivate, changeNodeToOutput, changeNodeToInput
    	 		OOBNPopupMenuTooltipMessage, openClassFromFile, ErrorLoadingClass, editionToolTip,
    	 		removeToolTip, newToolTip, newFromFileToolTip, status, newOOBNClass, renameClass,
    	 		oobnFileFilter, NoClassSelected, compilationError, DuplicatedClassName, 
    	 		CannotDragNDrop, dragNDropToAddInstance, compileToolTip, statusReadyLabel, 
    	 		classNavigationPanelLabel, leftClickToChangeNodeType, changeNodeType, saveTitle, 
    	 		unsupportedGraphFormat, ...    	 	
    -->
    <extension-point id="ResourceBundle">
        <parameter-def id="class"/>
    </extension-point>
</plugin>
